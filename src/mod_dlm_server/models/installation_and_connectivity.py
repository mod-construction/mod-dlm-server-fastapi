# coding: utf-8

"""
    mod-dlm API

    mod-dlm is an open source domain specific language to describe prefab construction elements. This project provides tools for defining entity models and automatically generating CRUD APIs, enabling suppliers to create and manage catalogs of their products easily.

    The version of the OpenAPI document: 1.0.12
    Contact: info@mod.construction
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class InstallationAndConnectivity(BaseModel):
    """
    Describes how the prefab element is installed and what structural systems it is compatible with.
    """ # noqa: E501
    connection_type: Optional[StrictStr] = Field(default=None, description="Type of connection used for assembly, including mechanical, chemical, and modular methods.", alias="connectionType")
    installation_time: Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]] = Field(description="Estimated installation time in minutes", alias="installationTime")
    compatibility: Optional[StrictStr] = Field(default=None, description="Structural systems compatible with the prefab element, supporting integration into various construction assemblies.")
    __properties: ClassVar[List[str]] = ["connectionType", "installationTime", "compatibility"]

    @field_validator('connection_type')
    def connection_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Bolt-on', 'Welded', 'Clip-on', 'Adhesive', 'Mortar', 'Snap-fit', 'Plug-and-Play', 'Dry Joint',):
            raise ValueError("must be one of enum values ('Bolt-on', 'Welded', 'Clip-on', 'Adhesive', 'Mortar', 'Snap-fit', 'Plug-and-Play', 'Dry Joint')")
        return value

    @field_validator('compatibility')
    def compatibility_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Steel Frame', 'Wood Frame', 'Concrete Structure', 'Brickwork', 'Modular Systems', 'Glass Facades', 'Composite Materials', 'CLT', 'Light Gauge Steel', 'Masonry Infill',):
            raise ValueError("must be one of enum values ('Steel Frame', 'Wood Frame', 'Concrete Structure', 'Brickwork', 'Modular Systems', 'Glass Facades', 'Composite Materials', 'CLT', 'Light Gauge Steel', 'Masonry Infill')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of InstallationAndConnectivity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of InstallationAndConnectivity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "connectionType": obj.get("connectionType"),
            "installationTime": obj.get("installationTime"),
            "compatibility": obj.get("compatibility")
        })
        return _obj


