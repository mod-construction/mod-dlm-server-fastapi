# coding: utf-8

"""
    mod-dlm API

    mod-dlm is an open source domain specific language to describe prefab construction elements. This project provides tools for defining entity models and automatically generating CRUD APIs, enabling suppliers to create and manage catalogs of their products easily.

    The version of the OpenAPI document: 1.0.7
    Contact: info@mod.construction
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from mod_dlm_server.models.prefab_element_performance_acoustic_properties import PrefabElementPerformanceAcousticProperties
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PrefabElementPerformance(BaseModel):
    """
    PrefabElementPerformance
    """ # noqa: E501
    resistance_to_fire_classification: StrictStr = Field(alias="resistanceToFireClassification")
    thermal_transmittance: Union[Annotated[float, Field(le=2, strict=True, ge=0)], Annotated[int, Field(le=2, strict=True, ge=0)]] = Field(alias="thermalTransmittance")
    acoustic_properties: Optional[PrefabElementPerformanceAcousticProperties] = Field(default=None, alias="acousticProperties")
    __properties: ClassVar[List[str]] = ["resistanceToFireClassification", "thermalTransmittance", "acousticProperties"]

    @field_validator('resistance_to_fire_classification')
    def resistance_to_fire_classification_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('A1', 'A2', 'B', 'C', 'D', 'E', 'F', '1-hour', '2-hour', '3-hour', '4-hour'):
            raise ValueError("must be one of enum values ('A1', 'A2', 'B', 'C', 'D', 'E', 'F', '1-hour', '2-hour', '3-hour', '4-hour')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PrefabElementPerformance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of acoustic_properties
        if self.acoustic_properties:
            _dict['acousticProperties'] = self.acoustic_properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PrefabElementPerformance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "resistanceToFireClassification": obj.get("resistanceToFireClassification"),
            "thermalTransmittance": obj.get("thermalTransmittance"),
            "acousticProperties": PrefabElementPerformanceAcousticProperties.from_dict(obj.get("acousticProperties")) if obj.get("acousticProperties") is not None else None
        })
        return _obj


