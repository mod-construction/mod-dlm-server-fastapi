# coding: utf-8

"""
    mod-dlm API

    mod-dlm is an open source domain specific language to describe prefab construction elements. This project provides tools for defining entity models and automatically generating CRUD APIs, enabling suppliers to create and manage catalogs of their products easily.

    The version of the OpenAPI document: 1.0.12
    Contact: info@mod.construction
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from mod_dlm_server.models.prefab_element_performance_acoustic_properties import PrefabElementPerformanceAcousticProperties
from mod_dlm_server.models.prefab_element_performance_fire_resistance import PrefabElementPerformanceFireResistance
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PrefabElementPerformance(BaseModel):
    """
    Optional performance metrics related to strength, insulation, or soundproofing.
    """ # noqa: E501
    fire_resistance: PrefabElementPerformanceFireResistance = Field(alias="fireResistance")
    thermal_transmittance: Union[Annotated[float, Field(le=2, strict=True, ge=0)], Annotated[int, Field(le=2, strict=True, ge=0)]] = Field(description="Thermal transmittance (U-value) in W/m²K, typically between 0 and 2", alias="thermalTransmittance")
    acoustic_properties: Optional[PrefabElementPerformanceAcousticProperties] = Field(default=None, alias="acousticProperties")
    air_tightness: Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]] = Field(description="Air permeability (e.g., n50 value in 1/h or q50 in m³/h·m²) - lower values indicate better airtightness", alias="airTightness")
    vapor_permeability: Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]] = Field(description="Vapor permeability in µ or Sd value in meters (ISO 12572) - measures resistance to water vapor diffusion", alias="vaporPermeability")
    __properties: ClassVar[List[str]] = ["fireResistance", "thermalTransmittance", "acousticProperties", "airTightness", "vaporPermeability"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PrefabElementPerformance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fire_resistance
        if self.fire_resistance:
            _dict['fireResistance'] = self.fire_resistance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of acoustic_properties
        if self.acoustic_properties:
            _dict['acousticProperties'] = self.acoustic_properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PrefabElementPerformance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fireResistance": PrefabElementPerformanceFireResistance.from_dict(obj.get("fireResistance")) if obj.get("fireResistance") is not None else None,
            "thermalTransmittance": obj.get("thermalTransmittance"),
            "acousticProperties": PrefabElementPerformanceAcousticProperties.from_dict(obj.get("acousticProperties")) if obj.get("acousticProperties") is not None else None,
            "airTightness": obj.get("airTightness"),
            "vaporPermeability": obj.get("vaporPermeability")
        })
        return _obj


