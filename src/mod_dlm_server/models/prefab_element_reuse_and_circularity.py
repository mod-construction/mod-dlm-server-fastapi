# coding: utf-8

"""
    mod-dlm API

    mod-dlm is an open source domain specific language to describe prefab construction elements. This project provides tools for defining entity models and automatically generating CRUD APIs, enabling suppliers to create and manage catalogs of their products easily.

    The version of the OpenAPI document: 1.0.12
    Contact: info@mod.construction
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PrefabElementReuseAndCircularity(BaseModel):
    """
    Optional data describing how reusable or refurbishable the product is.
    """ # noqa: E501
    disassembly_rating: StrictStr = Field(description="Ease of disassembly rated from 1 (not possible) to 5 (tool-free), based on ISO 20887:2020.", alias="disassemblyRating")
    reuse_potential: StrictStr = Field(description="End-of-life potential of the element, such as single-use, recyclable, or remanufacturable.", alias="reusePotential")
    refurbishment_scope: StrictStr = Field(description="Extent of refurbishment: none, surface-only, partial, or full reuse of functional components.", alias="refurbishmentScope")
    circularity_certification: StrictStr = Field(description="Circularity certification level (e.g., C2C_gold, C2C_platinum).", alias="circularityCertification")
    __properties: ClassVar[List[str]] = ["disassemblyRating", "reusePotential", "refurbishmentScope", "circularityCertification"]

    @field_validator('disassembly_rating')
    def disassembly_rating_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('1', '2', '3', '4', '5',):
            raise ValueError("must be one of enum values ('1', '2', '3', '4', '5')")
        return value

    @field_validator('reuse_potential')
    def reuse_potential_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('single-use', 'multi-use', 'recyclable', 'remanufacturable',):
            raise ValueError("must be one of enum values ('single-use', 'multi-use', 'recyclable', 'remanufacturable')")
        return value

    @field_validator('refurbishment_scope')
    def refurbishment_scope_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('none', 'surface-only', 'partial', 'full',):
            raise ValueError("must be one of enum values ('none', 'surface-only', 'partial', 'full')")
        return value

    @field_validator('circularity_certification')
    def circularity_certification_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('none', 'C2C_basic', 'C2C_bronze', 'C2C_silver', 'C2C_gold', 'C2C_platinum',):
            raise ValueError("must be one of enum values ('none', 'C2C_basic', 'C2C_bronze', 'C2C_silver', 'C2C_gold', 'C2C_platinum')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PrefabElementReuseAndCircularity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PrefabElementReuseAndCircularity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "disassemblyRating": obj.get("disassemblyRating"),
            "reusePotential": obj.get("reusePotential"),
            "refurbishmentScope": obj.get("refurbishmentScope"),
            "circularityCertification": obj.get("circularityCertification")
        })
        return _obj


