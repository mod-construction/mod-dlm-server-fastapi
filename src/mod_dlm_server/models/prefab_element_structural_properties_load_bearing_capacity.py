# coding: utf-8

"""
    mod-dlm API

    mod-dlm is an open source domain specific language to describe prefab construction elements. This project provides tools for defining entity models and automatically generating CRUD APIs, enabling suppliers to create and manage catalogs of their products easily.

    The version of the OpenAPI document: 1.0.12
    Contact: info@mod.construction
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PrefabElementStructuralPropertiesLoadBearingCapacity(BaseModel):
    """
    The maximum load the element can bear, expressed as a positive number (e.g., 5.0)
    """ # noqa: E501
    maximum_load: Union[StrictFloat, StrictInt] = Field(description="The maximum load the element can bear, expressed as a positive number (e.g., 5.0)", alias="maximumLoad")
    force_unit: StrictStr = Field(description="Unit of force measurement, e.g., 'kN' for kilonewtons or 'N' for newtons", alias="forceUnit")
    load_distribution: StrictStr = Field(description="The type of load distribution applied to the element.", alias="loadDistribution")
    test_standard: Optional[StrictStr] = Field(default=None, description="Structural load testing standard used to determine maximum load.", alias="testStandard")
    __properties: ClassVar[List[str]] = ["maximumLoad", "forceUnit", "loadDistribution", "testStandard"]

    @field_validator('force_unit')
    def force_unit_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('N', 'kN', 'lbf', 'kgf',):
            raise ValueError("must be one of enum values ('N', 'kN', 'lbf', 'kgf')")
        return value

    @field_validator('load_distribution')
    def load_distribution_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('point', 'uniform', 'triangular', 'trapezoidal', 'eccentric', 'custom',):
            raise ValueError("must be one of enum values ('point', 'uniform', 'triangular', 'trapezoidal', 'eccentric', 'custom')")
        return value

    @field_validator('test_standard')
    def test_standard_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('EN 1991-1-1', 'ASTM E72', 'ISO 4355',):
            raise ValueError("must be one of enum values ('EN 1991-1-1', 'ASTM E72', 'ISO 4355')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PrefabElementStructuralPropertiesLoadBearingCapacity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PrefabElementStructuralPropertiesLoadBearingCapacity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "maximumLoad": obj.get("maximumLoad"),
            "forceUnit": obj.get("forceUnit"),
            "loadDistribution": obj.get("loadDistribution"),
            "testStandard": obj.get("testStandard")
        })
        return _obj


