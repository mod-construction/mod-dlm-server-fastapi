# coding: utf-8

"""
    mod-dlm API

    mod-dlm is an open source domain specific language to describe prefab construction elements. This project provides tools for defining entity models and automatically generating CRUD APIs, enabling suppliers to create and manage catalogs of their products easily.

    The version of the OpenAPI document: 1.1.0
    Contact: info@mod.construction
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from mod_dlm_server.models.sustainability_circularity import SustainabilityCircularity
from mod_dlm_server.models.sustainability_environmental_impact import SustainabilityEnvironmentalImpact
from mod_dlm_server.models.sustainability_origin import SustainabilityOrigin
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Sustainability(BaseModel):
    """
    Sustainability attributes of the element.
    """ # noqa: E501
    environmental_impact: SustainabilityEnvironmentalImpact = Field(alias="environmentalImpact")
    circularity: SustainabilityCircularity
    origin: SustainabilityOrigin
    __properties: ClassVar[List[str]] = ["environmentalImpact", "circularity", "origin"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Sustainability from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of environmental_impact
        if self.environmental_impact:
            _dict['environmentalImpact'] = self.environmental_impact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of circularity
        if self.circularity:
            _dict['circularity'] = self.circularity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of origin
        if self.origin:
            _dict['origin'] = self.origin.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Sustainability from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "environmentalImpact": SustainabilityEnvironmentalImpact.from_dict(obj.get("environmentalImpact")) if obj.get("environmentalImpact") is not None else None,
            "circularity": SustainabilityCircularity.from_dict(obj.get("circularity")) if obj.get("circularity") is not None else None,
            "origin": SustainabilityOrigin.from_dict(obj.get("origin")) if obj.get("origin") is not None else None
        })
        return _obj


