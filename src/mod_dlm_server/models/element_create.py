# coding: utf-8

"""
    mod-dlm API

    mod-dlm is an open source domain specific language to describe prefab construction elements. This project provides tools for defining entity models and automatically generating CRUD APIs, enabling suppliers to create and manage catalogs of their products easily.

    The version of the OpenAPI document: 1.0.13
    Contact: info@mod.construction
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from mod_dlm_server.models.installation_and_connectivity import InstallationAndConnectivity
from mod_dlm_server.models.prefab_element_aesthetic_and_customization_options import PrefabElementAestheticAndCustomizationOptions
from mod_dlm_server.models.prefab_element_bounding_box import PrefabElementBoundingBox
from mod_dlm_server.models.prefab_element_dimensional import PrefabElementDimensional
from mod_dlm_server.models.prefab_element_documentation_and_compliance import PrefabElementDocumentationAndCompliance
from mod_dlm_server.models.prefab_element_economic_factors import PrefabElementEconomicFactors
from mod_dlm_server.models.prefab_element_lifecycle_and_maintenance import PrefabElementLifecycleAndMaintenance
from mod_dlm_server.models.prefab_element_material import PrefabElementMaterial
from mod_dlm_server.models.prefab_element_performance import PrefabElementPerformance
from mod_dlm_server.models.prefab_element_product_category import PrefabElementProductCategory
from mod_dlm_server.models.prefab_element_structural_properties import PrefabElementStructuralProperties
from mod_dlm_server.models.prefab_element_version_metadata import PrefabElementVersionMetadata
from mod_dlm_server.models.sustainability import Sustainability
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ElementCreate(BaseModel):
    """
    An element to create.
    """ # noqa: E501
    version_metadata: PrefabElementVersionMetadata = Field(alias="versionMetadata")
    name: Annotated[str, Field(min_length=1, strict=True)] = Field(description="Human-readable name of the prefab element.")
    description: Annotated[str, Field(min_length=1, strict=True)] = Field(description="Detailed description of the prefab element, including its intended use or application.")
    bounding_box: PrefabElementBoundingBox = Field(alias="boundingBox")
    images: Annotated[List[StrictStr], Field(min_length=1)] = Field(description="List of image URLs showing the prefab element from various angles.")
    product_category: PrefabElementProductCategory = Field(alias="productCategory")
    material: PrefabElementMaterial
    dimensional: PrefabElementDimensional
    structural_properties: Optional[PrefabElementStructuralProperties] = Field(default=None, alias="structuralProperties")
    performance: Optional[PrefabElementPerformance] = None
    sustainability: Optional[Sustainability] = Field(default=None, description="Environmental and sustainability performance such as EPDs or recyclability.")
    documentation_and_compliance: Optional[PrefabElementDocumentationAndCompliance] = Field(default=None, alias="documentationAndCompliance")
    installation_and_connectivity: Optional[InstallationAndConnectivity] = Field(default=None, description="Optional installation guidelines and connectivity interface descriptions.", alias="installationAndConnectivity")
    lifecycle_and_maintenance: Optional[PrefabElementLifecycleAndMaintenance] = Field(default=None, alias="lifecycleAndMaintenance")
    aesthetic_and_customization_options: Optional[PrefabElementAestheticAndCustomizationOptions] = Field(default=None, alias="aestheticAndCustomizationOptions")
    economic_factors: Optional[PrefabElementEconomicFactors] = Field(default=None, alias="economicFactors")
    ifc_type: Optional[StrictStr] = Field(default=None, description="IFC Building Element types based on IFC 4.3 used in BIM tools for semantic classification. (e.g., IfcWall, IfcSlab).", alias="ifcType")
    bim_model_url: Optional[StrictStr] = Field(default=None, description="Optional URL pointing to a downloadable BIM model or online viewer for the element.", alias="bimModelUrl")
    __properties: ClassVar[List[str]] = ["versionMetadata", "name", "description", "boundingBox", "images", "productCategory", "material", "dimensional", "structuralProperties", "performance", "sustainability", "documentationAndCompliance", "installationAndConnectivity", "lifecycleAndMaintenance", "aestheticAndCustomizationOptions", "economicFactors", "ifcType", "bimModelUrl"]

    @field_validator('ifc_type')
    def ifc_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('IfcBeam', 'IfcChimney', 'IfcColumn', 'IfcCovering', 'IfcCurtainWall', 'IfcDoor', 'IfcFooting', 'IfcMember', 'IfcPile', 'IfcPlate', 'IfcRailing', 'IfcRamp', 'IfcRampFlight', 'IfcRoof', 'IfcShadingDevice', 'IfcSlab', 'IfcStair', 'IfcStairFlight', 'IfcWall', 'IfcWallStandardCase', 'IfcWindow', 'IfcBuildingElementProxy',):
            raise ValueError("must be one of enum values ('IfcBeam', 'IfcChimney', 'IfcColumn', 'IfcCovering', 'IfcCurtainWall', 'IfcDoor', 'IfcFooting', 'IfcMember', 'IfcPile', 'IfcPlate', 'IfcRailing', 'IfcRamp', 'IfcRampFlight', 'IfcRoof', 'IfcShadingDevice', 'IfcSlab', 'IfcStair', 'IfcStairFlight', 'IfcWall', 'IfcWallStandardCase', 'IfcWindow', 'IfcBuildingElementProxy')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ElementCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of version_metadata
        if self.version_metadata:
            _dict['versionMetadata'] = self.version_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bounding_box
        if self.bounding_box:
            _dict['boundingBox'] = self.bounding_box.to_dict()
        # override the default output from pydantic by calling `to_dict()` of product_category
        if self.product_category:
            _dict['productCategory'] = self.product_category.to_dict()
        # override the default output from pydantic by calling `to_dict()` of material
        if self.material:
            _dict['material'] = self.material.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dimensional
        if self.dimensional:
            _dict['dimensional'] = self.dimensional.to_dict()
        # override the default output from pydantic by calling `to_dict()` of structural_properties
        if self.structural_properties:
            _dict['structuralProperties'] = self.structural_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of performance
        if self.performance:
            _dict['performance'] = self.performance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sustainability
        if self.sustainability:
            _dict['sustainability'] = self.sustainability.to_dict()
        # override the default output from pydantic by calling `to_dict()` of documentation_and_compliance
        if self.documentation_and_compliance:
            _dict['documentationAndCompliance'] = self.documentation_and_compliance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of installation_and_connectivity
        if self.installation_and_connectivity:
            _dict['installationAndConnectivity'] = self.installation_and_connectivity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lifecycle_and_maintenance
        if self.lifecycle_and_maintenance:
            _dict['lifecycleAndMaintenance'] = self.lifecycle_and_maintenance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of aesthetic_and_customization_options
        if self.aesthetic_and_customization_options:
            _dict['aestheticAndCustomizationOptions'] = self.aesthetic_and_customization_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of economic_factors
        if self.economic_factors:
            _dict['economicFactors'] = self.economic_factors.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ElementCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "versionMetadata": PrefabElementVersionMetadata.from_dict(obj.get("versionMetadata")) if obj.get("versionMetadata") is not None else None,
            "name": obj.get("name"),
            "description": obj.get("description"),
            "boundingBox": PrefabElementBoundingBox.from_dict(obj.get("boundingBox")) if obj.get("boundingBox") is not None else None,
            "images": obj.get("images"),
            "productCategory": PrefabElementProductCategory.from_dict(obj.get("productCategory")) if obj.get("productCategory") is not None else None,
            "material": PrefabElementMaterial.from_dict(obj.get("material")) if obj.get("material") is not None else None,
            "dimensional": PrefabElementDimensional.from_dict(obj.get("dimensional")) if obj.get("dimensional") is not None else None,
            "structuralProperties": PrefabElementStructuralProperties.from_dict(obj.get("structuralProperties")) if obj.get("structuralProperties") is not None else None,
            "performance": PrefabElementPerformance.from_dict(obj.get("performance")) if obj.get("performance") is not None else None,
            "sustainability": Sustainability.from_dict(obj.get("sustainability")) if obj.get("sustainability") is not None else None,
            "documentationAndCompliance": PrefabElementDocumentationAndCompliance.from_dict(obj.get("documentationAndCompliance")) if obj.get("documentationAndCompliance") is not None else None,
            "installationAndConnectivity": InstallationAndConnectivity.from_dict(obj.get("installationAndConnectivity")) if obj.get("installationAndConnectivity") is not None else None,
            "lifecycleAndMaintenance": PrefabElementLifecycleAndMaintenance.from_dict(obj.get("lifecycleAndMaintenance")) if obj.get("lifecycleAndMaintenance") is not None else None,
            "aestheticAndCustomizationOptions": PrefabElementAestheticAndCustomizationOptions.from_dict(obj.get("aestheticAndCustomizationOptions")) if obj.get("aestheticAndCustomizationOptions") is not None else None,
            "economicFactors": PrefabElementEconomicFactors.from_dict(obj.get("economicFactors")) if obj.get("economicFactors") is not None else None,
            "ifcType": obj.get("ifcType"),
            "bimModelUrl": obj.get("bimModelUrl")
        })
        return _obj


